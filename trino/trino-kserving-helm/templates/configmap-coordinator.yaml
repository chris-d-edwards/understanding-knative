apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "trino.coordinator" . }}
  labels:
    {{- include "trino.labels" . | nindent 4 }}
    app.kubernetes.io/component: coordinator
data:
  node.properties: |
    node.environment={{ .Values.server.node.environment }}
    node.data-dir={{ .Values.server.node.dataDir }}
    plugin.dir={{ .Values.server.node.pluginDir }}

  jvm.config: |
    -server
    -Xmx{{ .Values.server.jvm.maxHeapSize }}
    -XX:+{{ .Values.server.jvm.gcMethod.type }}
    -XX:G1HeapRegionSize={{ .Values.server.jvm.gcMethod.g1.heapRegionSize }}
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
     -javaagent:/usr/lib/trino/lib/jmx_prometheus_javaagent-0.13.0.jar=8081:/etc/trino/prometheus_config.yaml

  config.properties: |
    coordinator=true
{{- if gt (int .Values.server.workers) 0 }}
    node-scheduler.include-coordinator=false
{{- else }}
    node-scheduler.include-coordinator=true
{{- end }}
    http-server.http.port={{ .Values.server.config.http.port }}
    query.max-memory={{ .Values.server.config.query.maxMemory }}
    query.max-memory-per-node={{ .Values.server.config.query.maxMemoryPerNode }}
    query.max-memory={{ .Values.server.config.query.maxTotalMemory }}
    query.max-total-memory-per-node={{ .Values.server.config.query.maxTotalMemoryPerNode }}
    discovery-server.enabled=true
    discovery.uri=http://localhost:{{ .Values.server.config.http.port }}
    #query-manager.required-workers={{ (int .Values.server.workers) }}
    query-manager.required-workers=2
  log.properties: |
    io.trino={{ .Values.server.log.trino.level }}

  prometheus_config.yaml: |
    # Rules
    
  probe-exec.sh: |
    #!/usr/bin/env bash
    starting=$( curl -s http://localhost:8080/v1/info | jq .starting)

    if [ "$starting" = false ] 
      then 
        exit 0
      else 
        exit 1
    fi

---
